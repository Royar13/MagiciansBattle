{"version":3,"sources":["Card.js","Game.js","Loader.js","main.js","Map.js","Square.js"],"names":[],"mappingsxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"script.js","sourcesContent":["function Card() {\r\n\r\n}\r\n\r\nCard.prototype.setSquare = function (square) {\r\n    if (this.square != null) {\r\n        this.square.unsetCard();\r\n    }\r\n    this.square = square;\r\n    this.square.setCard(this);\r\n};\r\n\r\nCard.prototype.create = function (square) {\r\n    this.setSquare(square);\r\n    this.container = new createjs.Container();\r\n    this.squareImage = new createjs.Bitmap(game.loader.getItem(\"magician\"));\r\n    this.squareImage.setWidth(this.square.getWidth() / 2.5);\r\n    this.update();\r\n    this.container.addChild(this.squareImage);\r\n    stage.addChild(this.container);\r\n};\r\n\r\nCard.prototype.showLegalMoves = function () {\r\n    this.legalMoves = this.getLegalMoves();\r\n    for (var i in this.legalMoves) {\r\n        var square = this.legalMoves[i];\r\n        square.showLegalMove();\r\n    }\r\n    game.updateStage();\r\n};\r\n\r\nCard.prototype.getLegalMoves = function () {\r\n    var squares = this.square.map.squares;\r\n    var infinity = 1 / 0;\r\n    var orderedSquares = new Array();\r\n    for (var y in squares) {\r\n        for (var x in squares[y]) {\r\n            squares[y][x].distance = infinity;\r\n            squares[y][x].movementCost = 1;\r\n            orderedSquares.push({ x: x, y: y });\r\n        }\r\n    }\r\n    this.square.distance = 0;\r\n    var maxDistance = 3;\r\n    var moves = new Array();\r\n\r\n    while (orderedSquares.length > 0) {\r\n        orderedSquares.sort(function (a, b) {\r\n            return squares[a.y][a.x].distance - squares[b.y][b.x].distance;\r\n        });\r\n        var closestSquare = squares[orderedSquares[0].y][orderedSquares[0].x];\r\n        orderedSquares.splice(0, 1);\r\n        if (closestSquare.distance <= maxDistance) {\r\n            if (closestSquare !== this.square)\r\n                moves.push(closestSquare);\r\n        }\r\n        else {\r\n            return moves;\r\n        }\r\n        for (var i in closestSquare.access) {\r\n            var access = closestSquare.access[i];\r\n            if (access != null) {\r\n                var neighborSquare = squares[access.y][access.x];\r\n                var alt = closestSquare.distance + neighborSquare.movementCost;\r\n                if (alt < neighborSquare.distance) {\r\n                    neighborSquare.distance = alt;\r\n                    neighborSquare.prev = closestSquare;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return moves;\r\n};\r\n\r\nCard.prototype.moveToSquare = function (square) {\r\n    var tween = createjs.Tween.get(this.container);\r\n    var path = new Array();\r\n    var addStep = square;\r\n    do {\r\n        path.unshift(addStep);\r\n        addStep = addStep.prev;\r\n    } while (addStep !== this.square);\r\n    this.setSquare(square);\r\n    for (var i in path) {\r\n        var pos = this.getPosition(path[i]);\r\n        tween.to({ x: pos.x, y: pos.y }, 200).wait(50);\r\n    }\r\n    tween.call(function () {\r\n        createjs.Ticker.paused = true;\r\n    });\r\n    createjs.Ticker.paused = false;\r\n};\r\n\r\nCard.prototype.update = function () {\r\n    var pos = this.getPosition(this.square);\r\n    this.container.x = pos.x;\r\n    this.container.y = pos.y;\r\n};\r\n\r\nCard.prototype.getPosition = function (square) {\r\n    var pos = {};\r\n    pos.x = square.container.x - this.squareImage.width / 2;\r\n    pos.y = square.container.y - this.squareImage.height + square.getHeight() / 5;\r\n    return pos;\r\n};","function Game() {\r\n    this.loader = new Loader(this.newGame);\r\n}\r\n\r\nGame.prototype.newGame = function () {\r\n    this.resolution = { x: $(window).width(), y: $(window).height() };\r\n    $(\"#map\").attr({ width: this.resolution.x, height: this.resolution.y });\r\n    stage = new createjs.Stage(\"map\");\r\n    createjs.Ticker.addEventListener(\"tick\", function (e) {\r\n        if (!e.paused) {\r\n            stage.update();\r\n        }\r\n    });\r\n    createjs.Ticker.paused = true;\r\n    this.map = new Map();\r\n};\r\n\r\nGame.prototype.updateStage = function () {\r\n    if (createjs.Ticker.paused)\r\n        stage.update();\r\n};","function Loader(callback) {\r\n    var manifest = [\r\n           { src: \"magician.png\", id: \"magician\" }\r\n    ];\r\n    this.resources = new createjs.LoadQueue();\r\n    this.resources.addEventListener(\"complete\", callback);\r\n    this.resources.loadManifest(manifest, true, \"images/\");\r\n}\r\n\r\nLoader.prototype.getItem = function (id) {\r\n    return this.resources.getResult(id);\r\n}","var stage;\r\nvar game;\r\n$(document).ready(function () {\r\n    game = new Game();\r\n});\r\n","function Map() {\r\n    this.size = { x: 15, y: 10 };\r\n    this.zoom = 1;\r\n    this.minZoom = 0.5;\r\n    this.maxZoom = 2;\r\n    this.hexRadius = 80;\r\n    this.squares = new Array();\r\n    this.dragStart = null;\r\n    this.selectedSquare = null;\r\n    this.cancelSquareClick = false;\r\n    for (var y = 0; y < this.size.y; y++) {\r\n        this.squares[y] = new Array();\r\n        for (var x = 0; x < this.size.x; x++) {\r\n            this.squares[y][x] = new Square(this, x, y);\r\n        }\r\n    }\r\n    var card = new Card();\r\n    card.create(this.squares[0][0]);\r\n\r\n    var card = new Card();\r\n    card.create(this.squares[5][5]);\r\n    game.updateStage();\r\n\r\n    $(\"#map\").on(\"mousewheel\", function (e) {\r\n        this.changeZoom(e.deltaY, { x: e.clientX, y: e.clientY });\r\n        game.updateStage();\r\n    }.bind(this));\r\n    stage.addEventListener(\"stagemousedown\", function (e) {\r\n        this.cancelSquareClick = false;\r\n\r\n        this.dragStart = { x: e.stageX - stage.x, y: e.stageY - stage.y };\r\n        this.mapDragHandlerProxy = this.mapDragHandler.bind(this);\r\n        stage.addEventListener(\"stagemousemove\", this.mapDragHandlerProxy);\r\n        this.mapDragEndHandlerProxy = this.mapDragEndHandler.bind(this);\r\n        stage.addEventListener(\"stagemouseup\", this.mapDragEndHandlerProxy);\r\n    }.bind(this));\r\n    stage.addEventListener(\"stagemouseup\", function (e) {\r\n    }.bind(this));\r\n}\r\n\r\nMap.prototype.mapDragHandler = function (e) {\r\n    this.cancelSquareClick = true;\r\n\r\n    stage.x = e.stageX - this.dragStart.x;\r\n    stage.y = e.stageY - this.dragStart.y;\r\n    game.updateStage();\r\n};\r\n\r\nMap.prototype.mapDragEndHandler = function (e) {\r\n    this.dragStart = null;\r\n    stage.removeEventListener(\"stagemousemove\", this.mapDragHandlerProxy);\r\n    stage.removeEventListener(\"stagemouseup\", this.mapDragEndHandlerProxy);\r\n};\r\n\r\nMap.prototype.changeZoom = function (delta, zoomPosition) {\r\n    var newZoom = Math.max(Math.min(this.zoom + delta * 0.1, this.maxZoom), this.minZoom);\r\n    var changeFraction = newZoom / this.zoom;\r\n    this.zoom = newZoom;\r\n    stage.x -= (zoomPosition.x - stage.x) * (changeFraction - 1);\r\n    stage.y -= (zoomPosition.y - stage.y) * (changeFraction - 1);\r\n    stage.scaleX = this.zoom;\r\n    stage.scaleY = this.zoom;\r\n};\r\n\r\nMap.prototype.validatePoint = function (point) {\r\n    return (point.x >= 0 && point.x < this.size.x && point.y >= 0 && point.y < this.size.y) ? point : null;\r\n};\r\n\r\nMap.prototype.hideLegalMoves = function () {\r\n    for (var i in this.selectedSquare.card.legalMoves) {\r\n        this.selectedSquare.card.legalMoves[i].hideLegalMove();\r\n    }\r\n    this.selectedSquare.card.legalMoves = null;\r\n};\r\n\r\n//static\r\nMap.comparePoints = function (a, b) {\r\n    return (a.x == b.x && a.y == b.y);\r\n};","function Square(map, x, y) {\r\n    this.map = map;\r\n    this.index = { x: x, y: y };\r\n    this.container = new createjs.Container();\r\n    var pos = this.getPosition();\r\n    this.container.x = pos.x;\r\n    this.container.y = pos.y;\r\n\r\n    this.hex = new createjs.Shape();\r\n    this.drawHex(\"#fff\");\r\n    this.container.addChild(this.hex);\r\n    stage.addChild(this.container);\r\n\r\n    this.container.addEventListener(\"click\", this.select.bind(this));\r\n\r\n    this.access = new Array();\r\n    this.access[\"upleft\"] = { x: this.index.x - 1, y: this.index.y - 1 };\r\n    this.access[\"upright\"] = { x: this.index.x, y: this.index.y - 1 };\r\n    this.access[\"bottomleft\"] = { x: this.index.x - 1, y: this.index.y + 1 };\r\n    this.access[\"bottomright\"] = { x: this.index.x, y: this.index.y + 1 };\r\n    if (this.index.y % 2 != 0) {\r\n        for (var i in this.access) {\r\n            this.access[i].x += 1;\r\n        }\r\n    }\r\n    this.access[\"left\"] = { x: this.index.x - 1, y: this.index.y };\r\n    this.access[\"right\"] = { x: this.index.x + 1, y: this.index.y };\r\n    for (var i in this.access) {\r\n        this.access[i] = this.map.validatePoint(this.access[i]);\r\n    }\r\n\r\n}\r\nSquare.prototype.drawHex = function (fill) {\r\n    this.hex.graphics.clear().beginStroke(\"#000\").beginFill(fill).drawPolyStar(0, 0, this.map.hexRadius, 6, 0, 30);\r\n};\r\n\r\nSquare.prototype.select = function () {\r\n    if (this.card == null || this.map.cancelSquareClick) return;\r\n    if (this.map.selectedSquare != null) {\r\n        if (this.map.selectedSquare === this) {\r\n            this.unselect();\r\n            return;\r\n        }\r\n\r\n        this.map.selectedSquare.unselect();\r\n    }\r\n    this.map.selectedSquare = this;\r\n    this.card.showLegalMoves();\r\n};\r\n\r\nSquare.prototype.unselect = function () {\r\n\r\n};\r\n\r\nSquare.prototype.showLegalMove = function () {\r\n    this.drawHex(\"#0e76d6\");\r\n    this.legalMoveClickHandlerProxy = this.legalMoveClickHandler.bind(this);\r\n    this.container.addEventListener(\"click\", this.legalMoveClickHandlerProxy);\r\n};\r\n\r\nSquare.prototype.hideLegalMove = function () {\r\n    this.container.removeEventListener(\"click\", this.legalMoveClickHandlerProxy);\r\n    //this.container.removeAllEventListeners();\r\n    this.drawHex(\"#fff\");\r\n};\r\n\r\nSquare.prototype.legalMoveClickHandler = function () {\r\n    this.map.hideLegalMoves();\r\n    var selectedCard = this.map.selectedSquare.card;\r\n    selectedCard.moveToSquare(this);\r\n};\r\n\r\nSquare.prototype.getPosition = function () {\r\n    var pos = {};\r\n    var width = this.getWidth();\r\n    pos.x = (this.index.x + 0.5) * width;\r\n    if (this.index.y % 2 != 0) {\r\n        pos.x += width / 2;\r\n    }\r\n    var rowHeight = 1.5 * this.map.hexRadius;\r\n    pos.y = this.index.y * rowHeight + this.map.hexRadius;\r\n    return pos;\r\n};\r\n\r\nSquare.prototype.getWidth = function () {\r\n    return Math.cos(Math.PI / 6) * this.map.hexRadius * 2;\r\n};\r\n\r\nSquare.prototype.getHeight = function () {\r\n    return this.map.hexRadius * 2;\r\n};\r\n\r\nSquare.prototype.setCard = function (card) {\r\n    this.card = card;\r\n};\r\n\r\nSquare.prototype.unsetCard = function () {\r\n    this.card = null;\r\n};\r\n"],"sourceRoot":"/source/"}